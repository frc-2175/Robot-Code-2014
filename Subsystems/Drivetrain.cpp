// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Drivetrain.h"
#include "../Robotmap.h"
#include "../Commands/ArcadeDriveWithJoysticks.h"
Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	left = RobotMap::drivetrainLeft;
	right = RobotMap::drivetrainRight;
	robotDrive = RobotMap::drivetrainRobotDrive;
	leftEncoder = RobotMap::drivetrainLeftEncoder;
	rightEncoder = RobotMap::drivetrainRightEncoder;
	magicPIDOutput = RobotMap::drivetrainMagicPIDOutput;
	gyro = RobotMap::drivetrainGyro;
	shifters = RobotMap::drivetrainShifters;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	encoderPID = RobotMap::drivetrainEncoderPID;
	gyroPID = RobotMap::drivetrainGyroPID;
	
	shifters->Set(DoubleSolenoid::kReverse);
}
    
void Drivetrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ArcadeDriveWithJoysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Drivetrain::ArcadeDriveWithParameters(float forward, float turning) {
	robotDrive->ArcadeDrive(forward, turning, false);
	SmartDashboard::PutNumber("Shooter Down", (double)Robot::launcher->latchSwitch->Get());
	SmartDashboard::PutNumber("Shooter Up", (double)Robot::launcher->winchUpSwitch->Get());
//	fakeCompressor->Set(1);
	
}
void Drivetrain::ShiftToGear(bool isHigh) {
	if (isHigh) {
		shifters->Set(DoubleSolenoid::kForward);
	} else {
		shifters->Set(DoubleSolenoid::kReverse);
	}
}
