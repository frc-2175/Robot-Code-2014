// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Arm.h"
#include "../Robotmap.h"
Arm::Arm() : Subsystem("Arm") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	armSolenoid = RobotMap::armArmSolenoid;
	rollerBar = RobotMap::armRollerBar;
	armOutSwitch1 = RobotMap::armArmOutSwitch1;
	armOutSwitch2 = RobotMap::armArmOutSwitch2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Arm::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Arm::MoveArmToPosition(bool out) {
	if (out) {
		armSolenoid->Set(DoubleSolenoid::kForward);
	} else {
		armSolenoid->Set(DoubleSolenoid::kReverse);
	}
}
void Arm::RunRollerBarAtSpeed(float speed) {
	rollerBar->Set(speed);
}
bool Arm::IsArmOut() {
	return !(bool)armOutSwitch1->Get() || !(bool)armOutSwitch2->Get(); // The switches read 1 when the arm is NOT out. We need to typecast these values to bool and invert them before doing logic on them.
}
