// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
#define DEADBAND .05
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ArcadeDriveWithInputs.h"
#include "Commands/ArcadeDriveWithJoysticks.h"
#include "Commands/Auton0DoNothing.h"
#include "Commands/Auton1MobilityBonus.h"
#include "Commands/Auton2BlindShot.h"
#include "Commands/Auton3DoubleBlindShot.h"
#include "Commands/Auton4LowGoal.h"
#include "Commands/Auton5HotGoal.h"
#include "Commands/Delay.h"
#include "Commands/DriveForDistance.h"
#include "Commands/DriveToAngle.h"
#include "Commands/MoveArmIn.h"
#include "Commands/MoveArmOut.h"
#include "Commands/ReleaseLatch.h"
#include "Commands/RunRollerBar.h"
#include "Commands/RunRollerBarBackwards.h"
#include "Commands/ShiftToHighGear.h"
#include "Commands/Shoot.h"
#include "Commands/TurnTestSpikeOn.h"
#include "Commands/UnwindWinch.h"
#include "Commands/WaitForHotGoal.h"
#include "Commands/WinchLauncherDown.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	gamepad = new Joystick(3);
	
	releaseLatchOverride = new JoystickButton(gamepad, 11);
	releaseLatchOverride->WhenPressed(new ReleaseLatch());
	shootAndReload = new JoystickButton(gamepad, 8);
	shootAndReload->WhenPressed(new Shoot());
	intakeWheelsBackwards = new JoystickButton(gamepad, 5);
	intakeWheelsBackwards->WhileHeld(new RunRollerBarBackwards());
	intakeWheelsForward = new JoystickButton(gamepad, 7);
	intakeWheelsForward->WhileHeld(new RunRollerBar());
	armOut = new JoystickButton(gamepad, 1);
	armOut->WhenPressed(new MoveArmOut());
	armIn = new JoystickButton(gamepad, 4);
	armIn->WhenPressed(new MoveArmIn());
	joystickRight = new Joystick(2);
	
	commandShiftButton = new JoystickButton(joystickRight, 1);
	commandShiftButton->WhileHeld(new ShiftToHighGear());
	joystickLeft = new Joystick(1);
	
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("Auton 0 Do Nothing", new Auton0DoNothing());
	SmartDashboard::PutData("Auton 1 Mobility Bonus", new Auton1MobilityBonus());
	SmartDashboard::PutData("Auton 2 Blind Shot", new Auton2BlindShot());
	SmartDashboard::PutData("Auton 3 Double Blind Shot", new Auton3DoubleBlindShot());
	SmartDashboard::PutData("Auton 4 Low Goal", new Auton4LowGoal());
	SmartDashboard::PutData("Auton 5 Hot Goal", new Auton5HotGoal());
	SmartDashboard::PutData("ArcadeDriveWithJoysticks", new ArcadeDriveWithJoysticks());
	SmartDashboard::PutData("Wait For Hot Goal", new WaitForHotGoal());
	SmartDashboard::PutData("ShiftToHighGear", new ShiftToHighGear());
	SmartDashboard::PutData("MoveArmOut", new MoveArmOut());
	SmartDashboard::PutData("RunRollerBar", new RunRollerBar());
	SmartDashboard::PutData("RunRollerBarBackwards", new RunRollerBarBackwards());
	SmartDashboard::PutData("WinchLauncherDown", new WinchLauncherDown());
	SmartDashboard::PutData("UnwindWinch", new UnwindWinch());
	SmartDashboard::PutData("ReleaseLatch", new ReleaseLatch());
	SmartDashboard::PutData("Shoot", new Shoot());
	SmartDashboard::PutData("Turn Test Spike On", new TurnTestSpikeOn());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	SmartDashboard::PutData("MoveArmIn", new MoveArmIn(true));
	SmartDashboard::PutNumber("Shooter Down", (double)Robot::launcher->latchSwitch->Get());
	SmartDashboard::PutNumber("Shooter Up", (double)Robot::launcher->winchUpSwitch->Get());
	SmartDashboard::PutNumber("Arm Out Switch 1", (double)Robot::arm->armOutSwitch1->Get());
	SmartDashboard::PutNumber("Arm Out Switch 2", (double)Robot::arm->armOutSwitch2->Get());
	
	windLauncherButton = new JoystickButton(gamepad, 9);
	windLauncherButton->WhileHeld(new WinchLauncherDown(true));
	unwindWinchButton = new JoystickButton(gamepad, 10);
	unwindWinchButton->WhileHeld(new UnwindWinch(true));
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getGamepad() {
	return gamepad;
}
Joystick* OI::getJoystickRight() {
	return joystickRight;
}
Joystick* OI::getJoystickLeft() {
	return joystickLeft;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
double OI::deadband(double input) {
	if (-DEADBAND < input && input < DEADBAND) {
		input = 0;
	}
	return input;
}
bool OI::shouldOverrideLatch() {
	return gamepad->GetRawButton(11) && gamepad->GetRawButton(12);
}
