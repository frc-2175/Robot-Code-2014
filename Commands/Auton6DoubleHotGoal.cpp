// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Auton6DoubleHotGoal.h"
#include "Commands.h"
Auton6DoubleHotGoal::Auton6DoubleHotGoal() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void Auton6DoubleHotGoal::Initialize() {
	step = 1;
	numShots = 0;
	isDone = false;
	activeCommand = new MoveArmOut();
	activeCommand->Start();
}
// Called repeatedly when this Command is scheduled to run
void Auton6DoubleHotGoal::Execute() {
	switch (step) {
	case 1:		activeCommand = new Delay(0.5); // Wait for the vision system
				activeCommand->Start();
				step = 2;
				break;
	case 2:		if (!activeCommand->IsRunning()) step = 3; // Are we done delaying?
				break;
	case 3:		if (SmartDashboard::GetBoolean("IS_RECT")) { // Is there a hot goal?
					// We are in front of the hot goal
					step = 4;
				} else {
					// We chose the wrong goal :(
					step = 8;
				}
				break;
	case 4:		activeCommand = new Shoot(); // Hot goal detected, so shoot!
				activeCommand->Start();
				numShots++;
				step = 5;
				break;
	case 5:		if (!activeCommand->IsRunning()) step = 6; // Are we done shooting?
				break;
	case 6:		activeCommand = new RunRollerBar(1); // Slurp in another ball
				activeCommand->Start();
				step = 7;
				break;
	case 7:		if (!activeCommand->IsRunning()) step = 8; // Are we done slurping?
				break;
	case 8:		activeCommand = new DriveToAngle(40); // Point toward the other goal
				activeCommand->Start();
				step = 9;
				break;
	case 9:		if (!activeCommand->IsRunning()) step = 10; // Are we done turning?
				break;
	case 10:	activeCommand = new Shoot(); // Shoot!
				activeCommand->Start();
				numShots++;
				step = 11;
				break;
	case 11:	if (!activeCommand->IsRunning()) step++; // Are we done shooting?
				break;
	case 12:	if (numShots == 2) {
					step++;
				} else {
					step = 15;
				}
				break;
	case 13:	activeCommand = new ArcadeDriveWithInputs(-0.75,0,3); // Mobility bonus
				activeCommand->Start();
				step++;
				break;
	case 14:	if (!activeCommand->IsRunning()) step = -1; // Are we done driving?
				break;
	case 15:	activeCommand = new DriveToAngle(-40); // Point toward the other goal
				activeCommand->Start();
				step++;
				break;
	case 16:	if (!activeCommand->IsRunning()) step++; // Are we done turning?
				break;
	case 17:	activeCommand = new RunRollerBar(1); // Slurp in another ball
				activeCommand->Start();
				step++;
				break;
	case 18:	if (!activeCommand->IsRunning()) step++; // Are we done slurping?
				break;
	case 19:	activeCommand = new Shoot(); // Shoot!
				activeCommand->Start();
				numShots++;
				step++;
				break;
	case 20:	if (!activeCommand->IsRunning()) step = 13; // Are we done shooting?
				break;
	case -1:	isDone = true;
				break;
	}
}
// Make this return true when this Command no longer needs to run execute()
bool Auton6DoubleHotGoal::IsFinished() {
	return isDone;
}
// Called once after isFinished returns true
void Auton6DoubleHotGoal::End() {
	
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Auton6DoubleHotGoal::Interrupted() {
}
